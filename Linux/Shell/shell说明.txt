shell  分为bc shell  默认bash     
查看LInux的默认支持的shell
vim /etc/shells

echo xxx内容  

echo -e xxx内容
\\
\b   
\x     \x61输出a
\n
\t
\e      "\e[1;30-37m   xxx内容  \e[0m"

格式
#!/bin/bash   
#-----注释

执行
1.赋予执行权限
		赋予755权限
		绝对路径就可以执行      ./xx.sh  or  /xx/xx/x.sh 
2.用bash
		bash + 文件   ----不需要执行权限就可以运行

标准输入输出
键盘  /dev/stdin   0  标准输入
显示器  /dev/stdout   1  标准输出
显示器  /dev/stderr   2  标准错误输出

标准输出重定向
> 以覆盖的方式输入到文件或设备中
>> 以追加的方式输入到文件或设备中

标错误输出重定向
2> 以覆盖的方式输入到文件或设备中
2>> 以追加的方式输入到文件或设备中

同时输出标准输出和错误输出
ls  234234  > sss.file   2>&1
ls  234234  >> sss.file   2>&1

ls  234234  &> sss.file
ls  234234  &>> sss.file

ls  234234  >>sss.file   2>>xxxx.file将标准和错误输出分别保存到两个文件里面

输入重定向 <       <<
eg:  wc <  xxxfile  

多命令执行符号 ； && ||
；顺序执行
&& 命令1：命令2   只有命令1正确执行，命令2才执行  
|| 命令1：命令2   如果命令1正确执行，命令2不执行,如果命令1不正确执行，命令2才执行  

管道符  |
命令1 | 命令2
命令1的正确输出作为命令2的操作对象，  命令1必须有正确输出

通配符
？ 任意字符
*  任意内容
[] 匹配括号里面的一个字符
[^]排除匹配括号里面的内容

bash的特殊符号
' 单引号  在引号中的特殊符号都没有特殊含义  如& \  
" 双引号  在引号内的
$引用变量 
$(command)  意义同反引号  
` 反引号，就是esc下面的那个键,表示这是一条命令，系统会先执行执行他，并将结果作为一个值

变量
bash中所有的变量都是字符串类型，如果要进行数值运算，则需要指定类型
变量赋值等号中间不能有空格
如果值里面有空格则需要用单引号引起来
如果要引用变量则用$ 或者  ${}

变量分类
用户变量
环境变量：可以新建变量
位置参数变量：变量名不能变，不能新建变量
预定义变量参数变量：变量名不能变

本地变量
eg：name="123"
变量叠加 name1="$name"456  或者  name1=${name}456


set 查看系统所有环境变量，包括自定义的变量
unset 删除变量
环境变量的设置
export  设置环境变量

位置参数变量
$0     打印命令本身
$1-9   打印1-9的参数
${10+} 打印大于10的参数
$@     参数的集合 可以for each一个一个取出来
$*     所有参数，作为一个整体，无法分开
&#     打印参数个数 

预定义变量
$?  代表最后一次执行命令的状态 0代表上一条命令正确执行  非零代表上条命令非正常执行
$$  显示当前进程的pid号
$!  后台运行的最后一个pid      

接收键盘输入
read [选项] [变量名]
-p 提示信息
-t 等待时间 /秒
-n 最大字符
-s 隐藏输入数据，例如密码

数值运算:
declare [+/-] [选项] 变量名
- 给变量设定类型属性
+ 取消变量的类型属性
-i 将变量声明为integer
-x 将变量生命为环境变量 env就是将变量增加了x属性
-p 显示指定变量被声明的类型 
declare -i xxx变量名    将xxx强制声明为int类型

aa=11
bb=22
方法1：
declare -i cc = $aa+$bb

方法2：
用expr
cc = $(expr $aa + $bb)  注意加号左右两边的空格不能省略

方法3：
使用$((算数表达式))或者$[算数表达式]
cc = $(expr $aa + $bb)  注意加号左右两边的空格不能省略



